name: Quality Checks

on:
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  # 1. Setup Stage: Create Conda environment and install dependencies
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Install Miniconda and create a new environment with Python 3.12
      - name: Install miniconda and create environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.12.3"  # Ensure Python 3.12 is used in Conda
          activate-environment: app


      # Cache the Poetry environment
      - name: Cache poetry environment
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Install Poetry but make sure to use the Python from Conda
      - name: Install poetry and dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.8.2 -y
          poetry config virtualenvs.create false  # Disable virtualenv creation in Poetry, use Conda's env
          poetry install

  # 2. Static Stage: Run static analysis without installing anything new
  static:
    runs-on: ubuntu-latest
    
    needs: setup  # Ensure static job waits for setup to complete
    steps:
      - uses: actions/checkout@v3

      # Reuse the conda environment set up in the previous job
      - name: Reuse conda environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: app

      # Perform static checks
      - name: black check
        run: black --diff --check $(git ls-files '*.py')

      - name: isort check
        run: isort --diff --check --profile black $(git ls-files '*.py')

      - name: mypy check
        run: mypy $(git ls-files '*.py')

      - name: pylint check
        run: pylint $(git ls-files '*.py')

  # 3. Test Stage: Run tests without installing anything new
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    needs: setup  # Ensure tests wait for setup to complete
    steps:
      - uses: actions/checkout@v3
      - name: Decode json credentials
        run: echo ${{ secrets.SMARTAPI_CREDENTIALS }} | jq > smartapi_credentials.json

     # Set up an environment variable with value "app"
      - name: Set up environment variable
        run: |
         echo "APP=app" >> $GITHUB_ENV
         echo "SMARTAPI_CREDENTIALS=smartapi_credentials.json" >>$GITHUB_ENV
      # Reuse the conda environment set up in the previous job
      - name: Reuse conda environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: app

      # Run pytest for tests
      - name: testing
        run: pytest tests/ -vv
