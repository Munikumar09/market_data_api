# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Quality Checks
env:
  PYTHON_VERSION: 3.12.3
  POETRY_VERSION: 1.8.2

  # Postgres credentials for the test database
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: testpassword
  POSTGRES_DB: testdb
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432

  # JWT credentials
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  JWT_REFRESH_SECRET_KEY: ${{ secrets.JWT_REFRESH_SECRET_KEY }}
  JWT_HASHING_ALGO: ${{ secrets.JWT_HASHING_ALGO }}
  
  # Snowflake credentials
  MACHINE_ID: ${{ secrets.MACHINE_ID }}

  # SmartAPI credentials
  SMARTAPI_API_KEY: ${{ secrets.SMARTAPI_API_KEY }}
  SMARTAPI_CLIENT_ID: ${{ secrets.SMARTAPI_CLIENT_ID }}
  SMARTAPI_PWD: ${{ secrets.SMARTAPI_PWD }}
  SMARTAPI_TOKEN: ${{ secrets.SMARTAPI_TOKEN }}
on:
  pull_request:
    branches: [ "master" ]


permissions:
  contents: read

jobs:
  # This job sets up the Python environment
  static:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
        working-directory: backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Install miniconda and create environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          activate-environment: app

      # Install poetry and all the packages in pyproject.toml file
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }} -y
          ./scripts/setup
      - name: Format check
        run: ./scripts/format.sh --check
      - name: Lint check
        run: ./scripts/lint.sh
        
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
        working-directory: backend
    services:
      postgres:
        image: postgres:17  # Use a specific version for consistency
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3



      # - name: Decode json credentials
      #   run: echo ${{ secrets.SMARTAPI_CREDENTIALS }} | jq > smartapi_credentials.json

     # Set up an environment variable with value "app"
      - name: Set up environment variable
        run: |
         echo "APP=app" >> $GITHUB_ENV
        #  echo "SMARTAPI_CREDENTIALS=smartapi_credentials.json" >>$GITHUB_ENV

      # Install miniconda and create a new environment with python 3.10
      - name: Install miniconda and create environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          activate-environment: ${{ env.APP }}

      # Install poetry and all the packages in pyproject.toml file
      - name: Install poetry and dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }} -y
          ./scripts/setup
  
      - name: testing
        run: pytest . -vvv
    
